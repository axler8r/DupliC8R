#! /usr/bin/env zsh


local _synopsis="Synopsis:
    ${0} [args] [opts]

See also:
    ${0} --help
"
local _help="Usage:
    ${0} [opts] [args]

Description:
    Generate a new zsh script following the specified template.

Options:
    --help      Show this help message.
    [--opt1]    [Description of option 1]
    [--opt2]    [Description of option 2]


Examples:
    ${0} [example_opt] [example_arg]
"

# Generate the template for a new script
function generate_template() {
    cat <<'EOF'
#! /usr/bin/env zsh


# Variables --------------------------------------------------------------------
local _synopsis="Synopsis:
    ${0} [args] [opts]

See also:
    ${0} --help
"
local _help="Description:
    [Add a brief description of what this script does.]

Usage:
    ${0} [args] [opts]

Options:
    --help      Show this help message.
    [Add other options here]

Examples:
    [Provide examples of usage here]
"


# Functions --------------------------------------------------------------------
_synopsis() {
    echo "${_synopsis}" | tail --lines=+2
}

_help() {
    echo "${_help}" | tail --lines=+2
}

_opt1() {
    echo "Executing opt1"
}

_opt2() {
    echo "Executing opt2"
}


# Options ----------------------------------------------------------------------
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)     _help_flag=true ;;
        --opt1)     _opt1_flag=true ;;
        --opt2)     _opt2_flag=true ;;
        *)          _arg=$1         ;;
    esac
    shift
done


# Main -------------------------------------------------------------------------
[[ -n $_help_flag ]] && _help && exit 0
[[ -n $_opt1_flag ]] && _opt1 && exit 0
[[ -n $_opt2_flag ]] && _opt2 && exit 0


# Driver -----------------------------------------------------------------------
function <verb_noun>() {
    # [Add function logic here]
    echo "Executing <verb_noun>"
}


<verb_noun>


unfunction _synopsis
unfunction _help
unfunction _opt1
unfunction _opt2
unfunction <verb_noun>
EOF
}

while [[ $# -gt 0 ]]; do
    case "$1" in
        --help)
            echo "${_help}"
            exit 0
            ;;
        --dry-run)
            generate_template
            exit 0
            ;;
        *)
            script_name="$1"
            if [[ ! "$script_name" =~ ^[a-z]+-[a-z]+$ ]]; then # Check naming convention
                echo "Error: Invalid script name. Must follow PowerShell verb-noun naming convention." >&2
                exit 1
            fi
            generate_template                            \
            | sed "s/<verb-noun>/${script_name}/g" \
            | sed "s/<verb_noun>/$(echo "$script_name" | tr '-' '_')/g"
            exit 0
            ;;
    esac
    shift
done

# If no arguments are provided, show the synopsis
echo "${_synopsis}"

