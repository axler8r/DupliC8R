set -e


SANDBOX=${HOME}/Downloads/Sandbox
LOGDIR=/tmp/duplic8r
if [ -d "${LOGDIR}" ]; then
    rm -rf "${LOGDIR}"
fi
mkdir "${LOGDIR}"
exec > >(tee -i "${LOGDIR}/"install.log)
exec 2>&1


_info() {
    local MESSAGE=${1}
    echo
    echo "${MESSAGE}"
    echo "------------------------------------------------------------"
}


install_system_requirements() {
    _info "Installing system requirements"

    local FLAGS=(
        --no-install-recommends
        --no-show-upgraded
        --quiet
        --yes
    )
    local PACKAGES=(
        build-essential
        make-doc
        bzip2
        bzip2-doc
        curl
        devilspie2
        git
        git-flow
        tig
        htop
        less
        lsof
        python3
        python3-pip
        strace
        taskwarrior
        tmux
        tmux-plugin-manager
        tree
        universal-ctags
        unzip
        zip
        zsh
        zsh-autosuggestions
        zsh-doc
        zsh-syntax-highlighting
    )
    local COMMANDS=(
      "apt update"
      "&& apt upgrade ${FLAGS[@]}"
      "&& apt install ${FLAGS[@]} ${PACKAGES[@]}"
    )
    if [ $(id --user) -eq 0 ]; then
      echo ${COMMANDS[@]} | bash --
    else
      echo ${COMMANDS[@]} | sudo --shell --
    fi
}


install_python_requirements() {
    _info "Installing python requirements"

    pip3 install --user --upgrade pip
    for package in powerline-status powerline-gitstatus; do
        pip3 install --user $package
    done
}


backup_existing_config() {
    _info "Backing up existing configuration"

    local TIMESTAMP=$(date +%Y%m%d%H%M%S)
    local FILES=(
        ${HOME}/.XCompose
        ${HOME}/.ctags
        ${HOME}/.dircolors
        ${HOME}/.gitcommit
        ${HOME}/.gitconfig
        ${HOME}/.gitignore
        ${HOME}/.taskrc
        ${HOME}/.tigrc
        ${HOME}/.tmux.conf
        ${HOME}/.tmux_extend.zsh
        ${HOME}/.zshalias
        ${HOME}/.zshenv
        ${HOME}/.zshfunction
        ${HOME}/.zshprompt
        ${HOME}/.zshrc
        ${HOME}/.config/Code/User/settings.json
    )
    for file in ${FILES[@]}; do
        if [ -f $file ]; then
            mv $file $file.${TIMESTAMP}
        fi
    done

    local DIRECTORIES=(
        ${HOME}/.config/bat
        ${HOME}/.config/devilspie2
        ${HOME}/.config/julia
        ${HOME}/.config/kitty
        ${HOME}/.config/nvim
        ${HOME}/.config/powerline
        ${HOME}/.config/powershell
        ${HOME}/.config/taskwarrior
    )
    for dir in ${DIRECTORIES[@]}; do
        if [ -d $dir ]; then
            mv $dir $dir.${TIMESTAMP}
        fi
    done
}

install_duplic8r() {
    _info "Installing duplic8r"

    local DUPLIC8R_HOME="${HOME}/.duplic8r"
    local DUPLIC8R_SOURCE="${DUPLIC8R_HOME}/homedir"
    local DUPLIC8R_TARGET="${HOME}/.config"

    if [ -d ${DUPLIC8R_HOME} ]; then
        cd ${DUPLIC8R_HOME}
        git pull
    else
        git clone https://github.com/axler8r/duplic8r.git ${DUPLIC8R_HOME}
    fi

    if [ ! -d ${DUPLIC8R_TARGET} ]; then
        mkdir --parents ${DUPLIC8R_TARGET}
    fi

    ln --symbolic ${DUPLIC8R_SOURCE}/XCompose           ${HOME}/.XCompose
    ln --symbolic ${DUPLIC8R_SOURCE}/ctags              ${HOME}/.ctags
    ln --symbolic ${DUPLIC8R_SOURCE}/dircolors          ${HOME}/.dircolors
    ln --symbolic ${DUPLIC8R_SOURCE}/gitcommit          ${HOME}/.gitcommit
    ln --symbolic ${DUPLIC8R_SOURCE}/gitconfig          ${HOME}/.gitconfig
    ln --symbolic ${DUPLIC8R_SOURCE}/gitignore          ${HOME}/.gitignore
    ln --symbolic ${DUPLIC8R_SOURCE}/taskrc             ${HOME}/.taskrc
    ln --symbolic ${DUPLIC8R_SOURCE}/tigrc              ${HOME}/.tigrc
    ln --symbolic ${DUPLIC8R_SOURCE}/tmux               ${HOME}/.tmux.conf
    ln --symbolic ${DUPLIC8R_SOURCE}/tmux_extend.zsh    ${HOME}/.tmux_extend.zsh
    ln --symbolic ${DUPLIC8R_SOURCE}/zshalias           ${HOME}/.zshalias
    ln --symbolic ${DUPLIC8R_SOURCE}/zshenv             ${HOME}/.zshenv
    ln --symbolic ${DUPLIC8R_SOURCE}/zshfunction        ${HOME}/.zshfunction
    ln --symbolic ${DUPLIC8R_SOURCE}/zshprompt          ${HOME}/.zshprompt
    ln --symbolic ${DUPLIC8R_SOURCE}/zshrc              ${HOME}/.zshrc
    ln --symbolic ${DUPLIC8R_SOURCE}/config/bat         ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/devilspie2  ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/julia       ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/kitty       ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/nvim        ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/powerline   ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/powershell  ${DUPLIC8R_TARGET}
    ln --symbolic ${DUPLIC8R_SOURCE}/config/taskwarrior ${DUPLIC8R_TARGET}

    if [ ! -d ${DUPLIC8R_TARGET}/Code/User ]; then
        mkdir --parents ${DUPLIC8R_TARGET}/Code/User
    fi
    ln --symbolic ${DUPLIC8R_SOURCE}/config/Code/User/settings.json \
                  ${DUPLIC8R_TARGET}/Code/User/settings.json
}


configure_tmux_plugin_manager() {
    _info "Configuring tmux plugin manager"

    local TMUX_PLUGINS_HOME="${HOME}/.tmux/plugins"

    if [ ! -d ${HOME}/.tmux ]; then
        mkdir --parents ${TMUX_PLUGINS_HOME}
    fi

    if [ -d /usr/share/tmux-plugin-manager ]; then
        if [ ! -L ${TMUX_PLUGINS_HOME}/tpm ]; then
            ln --symbolic /usr/share/tmux-plugin-manager ${TMUX_PLUGINS_HOME}/tpm
        fi
    fi
}


install_vim_plug() {
    _info "Installing vim plug"

    local FLAGS=(
        --create-dirs
        --fail
        --location
        --output
    )

    if [ ! -f ${HOME}/.local/share/nvim/site/autoload/plug.vim ]; then
        curl ${FLAGS[@]} ${HOME}/.local/share/nvim/site/autoload/plug.vim \
            https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    fi
}


install_asdf() {
    _info "Installing asdf"

    local ASDF_PLUGINS=(
        bat
        choose
        dive
        duf
        exa
        fd
        fzf
        github-cli
        jq
        just
        neovim
        ripgrep
        tokei
        yq
    )

    if [ ! -d ${HOME}/.asdf ]; then
        git clone https://github.com/asdf-vm/asdf.git ${HOME}/.asdf --branch v0.13.1
        . ${HOME}/.asdf/asdf.sh

        for plugin in ${ASDF_PLUGINS[@]}; do
            echo "Installing $plugin"
            asdf plugin add $plugin
            asdf install $plugin latest
            asdf global $plugin $(asdf latest $plugin)
        done
    fi
}


set_default_shell() {
    _info "Setting default shell"

    local COMMAND=("chsh --shell $(which zsh) ${USER}")

    if [ ! "${SHELL}" == "$(which zsh)" ]; then
        if [ $(id --user) -eq 0 ]; then
            echo ${COMMAND[@]} | bash --
        else
            echo ${COMMAND[@]} | sudo --shell --
        fi
    fi
}


install() {
    install_system_requirements
    install_python_requirements
    backup_existing_config
    install_duplic8r
    configure_tmux_plugin_manager
    install_vim_plug
    install_asdf
    set_default_shell
}


create_sandbox() {
    mkdir --parents ${SANDBOX}
}


destroy_sandbox() {
    rm --recursive --force ${SANDBOX}
}


install_ctrlR() {
    _info "Installing ctrl+r"

    if [ ! -d ${HOME}/.zsh-hsmw ]; then
        git clone https://github.com/zdharma-continuum/history-search-multi-word.git \
                  ${HOME}/.zsh-hsmw
    else
        cd ${HOME}/.zsh-hsmw
        git pull
    fi
}


install_fonts() {
    _info "Installing fonts"

    if [ ! -d ${HOME}/.fonts ]; then
        mkdir ${HOME}/.fonts
    fi

    cd ${SANDBOX}

    wget --quiet https://github.com/microsoft/cascadia-code/releases/download/v2111.01/CascadiaCode-2111.01.zip
    unzip CascadiaCode-2111.01.zip
    rm --force ${HOME}/.fonts/CascadiaCode*.ttf
    mv --update ttf/CascadiaCode*.ttf ${HOME}/.fonts
    rm --force --recursive ${SANDBOX}/*

    wget --quiet https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.0/CascadiaCode.zip
    unzip CascadiaCode.zip
    rm --force ${HOME}/.fonts/CaskaydiaCoveNerdFont*.ttf
    mv --update CaskaydiaCoveNerdFont-{Regular,Italic,Bold,BoldItalic}.ttf ${HOME}/.fonts
    rm --force --recursive ${SANDBOX}/*

    fc-cache --force --verbose
}


install_numix_square_icons() {
    _info "Installing numix square icons"

    sudo add-apt-repository ppa:numix/ppa
    sudo apt update && sudo apt install numix-icon-theme-square
}


install_kitty() {
    _info "Installing kitty"

    curl --location https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin

    ln --symbolic --force \
       ${HOME}/.local/kitty.app/bin/kitty \
       ${HOME}/.local/kitty.app/bin/kitten \
       ${HOME}/.local/bin/
    cp ${HOME}/.local/kitty.app/share/applications/kitty.desktop \
       ${HOME}/.local/share/applications/
    cp ${HOME}/.local/kitty.app/share/applications/kitty-open.desktop \
       ${HOME}/.local/share/applications/

    sed --in-place \
        "s|Icon=kitty|Icon=/usr/share/icons/Numix-Square/48/apps/kitty.svg|g" \
        ${HOME}/.local/share/applications/kitty*.desktop
    sed --in-place \
        "s|Exec=kitty|Exec=/home/${USER}/.local/kitty.app/bin/kitty|g" \
        ${HOME}/.local/share/applications/kitty*.desktop
}


install_docker_engine() {
    _info "Installing docker engine"

    if [ ! -x $(which docker) ]; then
        curl --location https://get.docker.com | bash /dev/stdin
        if [ $(id --user) -ne 0 ]; then
            echo "usermod --append --groups docker ${USER}" | sudo --shell --
        fi
    fi
}


install_parallel() {
    _info "Installing parallel"

    if [ ! -x $(which parallel) ]; then
        cd ${SANDBOX}

        wget --quiet https://ftpmirror.gnu.org/parallel/parallel-latest.tar.bz2
        tar --extract --bzip2 --file parallel-latest.tar.bz2
        rm parallel-latest.tar.bz2
        cd parallel*
        ./configure --prefix=${HOME}/.local
        make
        make install

        cd ${HOME}
        rm -rf ${SANDBOX}/*
    fi
}


install_z() {
    _info "Installing z"

    local BIN_DIR=${HOME}/.local/bin

    if [ ! -x ${BIN_DIR}/z.sh ]; then
        cd ${SANDBOX}

        wget --quiet https://raw.githubusercontent.com/rupa/z/master/z.sh
        mv z.sh ${BIN_DIR}/z.sh
        chmod +x ${BIN_DIR}/z.sh

        cd ${HOME}
        rm -rf ${SANDBOX}/*
    fi
}


install_extras() {
    create_sandbox
    install_ctrlR
    install_fonts
    install_numix_square_icons
    install_kitty
    install_docker_engine
    install_parallel
    install_z
    destroy_sandbox
}


if [ $# -eq 0 ]; then
    install
    install_extras
    exit 0
elif [ $# -eq 1 ]; then
    if [ ${1} == "--minimal" ]; then
        install
        exit 0
    else
        echo "Usage: ${0} [--minimal]"
        exit 1
    fi
fi


unset SANDBOX
unset LOGDIR
