#!/bin/bash


# Base installation ------------------------------------------------------------
install_apt_packages() {
    _info "Installing system requirements"

    local _FLAGS=(
        "--no-install-recommends"
        "--no-show-upgraded"
        "--quiet"
        "--yes"
    )
    _trace "APT flags: " "${_FLAGS[*]}"

    local _PACKAGES=(
        "attr"
        "build-essential"
        "make-doc"
        "bzip2"
        "bzip2-doc"
        "curl"
        "devilspie2"
        "git"
        "git-flow"
        "tig"
        "htop"
        "less"
        "lsof"
        "pv"
        "python3"
        "python3-pip"
        "software-properties-common"
        "strace"
        "taskwarrior"
        "tmux"
        "tmux-plugin-manager"
        "tree"
        "universal-ctags"
        "unzip"
        "zip"
        "zsh"
        "zsh-autosuggestions"
        "zsh-doc"
        "zsh-syntax-highlighting"
    )
    _trace "APT packages: " "${_PACKAGES[*]}"

    local _COMMANDS=(
      "apt update"
      "&& apt upgrade ${_FLAGS[@]}"
      "&& apt install ${_FLAGS[@]} ${_PACKAGES[@]}"
    )
    _trace "APT commands: " "${_COMMANDS[*]}"

    _trace "Running APT"
    if [ "$(id --user)" -eq 0 ]; then
      echo "${_COMMANDS[@]}" | bash --
    else
      echo "${_COMMANDS[@]}" | sudo --shell --
    fi
}


install_python_packages() {
    _info "Installing python requirements"

    local _FLAGS=(
        "--user"
        "--upgrade"
    )
    _trace "PIP flags: " "${_FLAGS[*]}"

    local _PACKAGES=(
        "pip"
        "cliff"
        "huggingface_hub[cli]"
        "kaggle"
        "powerline-gitstatus"
        "powerline-status"
    )
    _trace "PIP packages: " "${_PACKAGES[*]}"

    _trace "Running PIP"
    pip3 install "${_FLAGS[@]}" "${_PACKAGES[@]}"
}


install_duplic8r() {
    _info "Installing duplic8r"

    local _DUPLIC8R_HOME="${HOME}/.duplic8r"
    local _SOURCE="${_DUPLIC8R_HOME}/homedir"
    local _XDG_CONFIG_DIR="${HOME}/.config"
    local _REPO="https://github.com/axler8r/duplic8r.git"
    local _BRANCH="stable"
    [ -n "${_DEVELOPMENT_FLAG}" ] && _BRANCH="development"
    _trace "Duplic8r home: " "${_DUPLIC8R_HOME}"
    _trace "Duplic8r source: " "${_SOURCE}"
    _trace "XDG config dir: " "${_XDG_CONFIG_DIR}"
    _trace "Duplic8r repo: " "${_REPO}"
    _trace "Duplic8r branch: " "${_BRANCH}"

    _trace "Installing duplic8r"
    if [ -d "${_DUPLIC8R_HOME}" ]; then
        _pull_repo "${_DUPLIC8R_HOME}" "${_BRANCH}"
    else
        _clone_repo "${_REPO}" "${_DUPLIC8R_HOME}" "${_BRANCH}"
    fi

    [ ! -d "${_XDG_CONFIG_DIR}" ] && mkdir --parents "${_XDG_CONFIG_DIR}"

    local _FILES=(
        "XCompose"
        "ctags"
        "dircolors"
        "gitcommit"
        "gitconfig"
        "gitignore"
        "taskrc"
        "tigrc"
        "tmux.conf"
        "tmux_extend.zsh"
        "zshalias"
        "zshenv"
        "zshfunction"
        "zshprompt"
        "zshrc"
    )
    _trace "Files: " "${_FILES[*]}"

    for _file in "${_FILES[@]}"; do
        _trace "Copying ${_file} from ${_SOURCE} to ${HOME}/.${_file}"
        _copy_file "${_SOURCE}/${_file}" "${HOME}/.${_file}"
    done

    local _CONFIGS=(
        "Code"
        "bat"
        "devilspie2"
        "julia"
        "kitty"
        "nvim"
    )
    _trace "Configs: " "${_CONFIGS[*]}"

    for _config in "${_CONFIGS[@]}"; do
        _trace "Copying ${_config} from ${_SOURCE}/config to ${_XDG_CONFIG_DIR}"
        _copy_file "${_SOURCE}/config/${_config}" "${_XDG_CONFIG_DIR}"
    done
}


configure_tmux_plugin_manager() {
    _info "Configuring tmux plugin manager"

    local TMUX_PLUGINS_HOME="${HOME}/.tmux/plugins"
    _trace "TMUX plugins home: " "${TMUX_PLUGINS_HOME}"

    if [ ! -d "${HOME}/.tmux" ]; then
        mkdir --parents "${TMUX_PLUGINS_HOME}"
    fi

    if [ -d /usr/share/tmux-plugin-manager ]; then
        if [ ! -L "${TMUX_PLUGINS_HOME}/tpm" ]; then
            _trace "Linking /usr/share/tmux-plugin-manager to ${TMUX_PLUGINS_HOME}/tpm"
            ln --symbolic /usr/share/tmux-plugin-manager "${TMUX_PLUGINS_HOME}/tpm"
        fi
    fi
}


install_asdf() {
    _info "Installing asdf"

    local _SOURCE="https://github.com/asdf-vm/asdf.git"
    local _TARGET="${HOME}/.asdf"
    local _ASDF_PLUGINS=(
        "bat"
        "choose"
        "dive"
        "duf"
        "exa"
        "fd"
        "fzf"
        "github-cli"
        "jq"
        "just"
        "neovim"
        "nodejs"
        "ripgrep"
        "shellcheck"
        "tokei"
        "yq"
    )
    _trace "Source: " "${_SOURCE}"
    _trace "Target: " "${_TARGET}"
    _trace "ASDF plugins: " "${_ASDF_PLUGINS[*]}"

    _trace "Finding latest asdf"
    local _ASDF_LATEST
    _ASDF_LATEST=$(
        git -c                                         \
        "versionsort.suffix=-"                         \
        ls-remote                                      \
        --exit-code                                    \
        --refs                                         \
        --sort="version:refname"                       \
        --tags https://github.com/asdf-vm/asdf "*.*.*" \
        | tail --lines=1                               \
        | cut --delimiter="/" --fields=3
    )
    _trace "ASDF latest: " "${_ASDF_LATEST}"

    if [ ! -d "${HOME}/.asdf" ]; then
        _trace "Cloning asdf ${_ASDF_LATEST}@${_SOURCE} to ${_TARGET}"
        git clone ${_SOURCE} "${_TARGET}" --branch "${_ASDF_LATEST}"
        source "${HOME}/.asdf/asdf.sh"

        for _plugin in "${_ASDF_PLUGINS[@]}"; do
            _trace "Installing ${_plugin}"
            asdf plugin add "${_plugin}"
            asdf install "${_plugin}" latest
            asdf global "${_plugin}" "$(asdf latest "${_plugin}")"
        done
    fi
}


install_vim_plug() {
    _info "Installing vim plug"

    local _SOURCE="https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim"
    local _TARGET="${HOME}/.local/share/nvim/site/autoload/plug.vim"
    local _FLAGS=(
        "--create-dirs"
        "--fail"
        "--location"
        "--output"
    )
    _trace "Source: " "${_SOURCE}"
    _trace "Target: " "${_TARGET}"
    _trace "Curl flags: " "${_FLAGS[*]}"

    if [ ! -f "${HOME}/.local/share/nvim/site/autoload/plug.vim" ]; then
        _trace "Downloading vim plug from ${_SOURCE} to ${_TARGET}"
        curl "${_FLAGS[@]}" "${_TARGET}" ${_SOURCE}
    fi
}


set_default_shell() {
    _info "Setting default shell"

    if [ ! "${SHELL}" == "$(which zsh)" ]; then
        _trace "Changing shell to zsh"
        if [ "$(id --user)" -eq 0 ]; then
            echo chsh --shell "$(which zsh)" "${USER}" | bash --
        else
            echo chsh --shell "$(which zsh)" "${USER}" | sudo --shell --
        fi
    fi
}


# Extended installation --------------------------------------------------------
install_snaps() {
    _info "Installing snaps"

    local _SNAPS=(
        "brave"
        "chromium"
        "code --classic"
        "obsidian --classic"
        "slack"
        "slides"
    )
    _trace "Snaps: " "${_SNAPS[*]}"

    _trace "Refreshing snaps"
    if [ "$(id --user)" -eq 0 ]; then
        echo snap refresh | bash --
    else
        echo snap refresh | sudo --shell --
    fi

    for _snap in "${_SNAPS[@]}"; do
        _trace "Installing ${_snap}"
        if [ "$(id --user)" -eq 0 ]; then
            echo snap install "${_snap}" | bash --
        else
            echo snap install "${_snap}" | sudo --shell --
        fi
    done
}


install_ctrlR() {
    _info "Installing ctrl+r"

    local _SOURCE="https://github.com/zdharma-continuum/history-search-multi-word.git"
    local _TARGET="${HOME}/.zsh-hsmw"
    _trace "Source: " "${_SOURCE}"
    _trace "Target: " "${_TARGET}"

    _trace "Installing history-search-multi-word"
    if [ ! -d "${HOME}/.zsh-hsmw" ]; then
        _trace "Cloning history-search-multi-word from ${_SOURCE} to ${_TARGET}"
        git clone ${_SOURCE} "${_TARGET}"
    else
        _trace "Pulling history-search-multi-word from ${_SOURCE} to ${_TARGET}"
        cd "${_TARGET}"
        git pull
    fi
}


install_fonts() {
    _info "Installing fonts"

    local _FONTS_DIR="${HOME}/.fonts"
    local _CASCADIA_SOURCE="https://github.com/microsoft/cascadia-code/releases/download/v2111.01/CascadiaCode-2111.01.zip"
    local _CASKAYDIA_SOURCE="https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.0/CascadiaCode.zip"
    _trace "Fonts dir: " "${_FONTS_DIR}"
    _trace "Cascadia source: " "${_CASCADIA_SOURCE}"
    _trace "Caskaydia source: " "${_CASKAYDIA_SOURCE}"

    [ ! -d "${_FONTS_DIR}" ] && mkdir "${_FONTS_DIR}"

    cd "${_SANDBOX}"

    _trace "Installing Cascadia Code"
    wget --quiet ${_CASCADIA_SOURCE}
    unzip CascadiaCode-2111.01.zip
    rm --force "${_FONTS_DIR}/CascadiaCode*.ttf"
    mv --update ttf/CascadiaCode*.ttf "${_FONTS_DIR}"
    rm --force --recursive "${_SANDBOX:?}/*"

    _trace "Installing Caskaydia Cove Nerd Font"
    wget --quiet ${_CASKAYDIA_SOURCE}
    unzip CascadiaCode.zip
    rm --force "${_FONTS_DIR}/CaskaydiaCoveNerdFont*.ttf"
    mv --update CaskaydiaCoveNerdFont-{Regular,Italic,Bold,BoldItalic}.ttf "${_FONTS_DIR}"
    rm --force --recursive "${_SANDBOX:?}/*"

    _trace "Updating font cache"
    fc-cache --force --verbose
}


install_numix_square_icons() {
    _info "Installing numix square icons"

    _trace "Adding numix ppa"
    sudo add-apt-repository ppa:numix/ppa
    _trace "Updating apt"
    sudo apt update && sudo apt install numix-icon-theme-square
}


install_kitty() {
    _info "Installing kitty"

    _trace "Installing kitty"
    curl --location https://sw.kovidgoyal.net/kitty/installer.sh | sh --

    _trace "Linking kitty"
    ln --symbolic --force                                                     \
       "${HOME}/.local/kitty.app/bin/kitty"                                   \
       "${HOME}/.local/kitty.app/bin/kitten"                                  \
       "${HOME}/.local/bin/"

    _trace "Copying kitty desktop files"
    cp "${HOME}/.local/kitty.app/share/applications/kitty.desktop"            \
       "${HOME}/.local/share/applications/"
    cp "${HOME}/.local/kitty.app/share/applications/kitty-open.desktop"       \
       "${HOME}/.local/share/applications/"

    _trace "Updating kitty desktop files"
    sed --in-place                                                            \
        "s|Icon=kitty|Icon=/usr/share/icons/Numix-Square/48/apps/kitty.svg|g" \
        "${HOME}"/.local/share/applications/kitty*.desktop
    sed --in-place                                                            \
        "s|Exec=kitty|Exec=/home/${USER}/.local/kitty.app/bin/kitty|g"        \
        "${HOME}"/.local/share/applications/kitty*.desktop
}


install_docker_engine() {
    _info "Installing docker engine"

    if [ ! -x "$(which docker)" ]; then
        _trace "Installing docker"
        curl --location https://get.docker.com | bash --
        if [ "$(id --user)" -ne 0 ]; then
            _trace "Adding user to docker group"
            echo usermod --append --groups docker "${USER}" | sudo --shell --
        fi
    fi
}


install_parallel() {
    _info "Installing parallel"

    if [ ! -x "$(which parallel)" ]; then
        cd "${_SANDBOX}"

        _trace "Installing parallel"
        wget --quiet https://ftpmirror.gnu.org/parallel/parallel-latest.tar.bz2
        tar --extract --bzip2 --file parallel-latest.tar.bz2
        rm parallel-latest.tar.bz2
        cd parallel*
        ./configure --prefix="${HOME}/.local"
        make
        make install

        cd "${HOME}"
        rm --force --recursive "${_SANDBOX:?}/*"
    fi
}


install_z() {
    _info "Installing z"

    local BIN_DIR="${HOME}/.local/bin"
    _trace "Bin dir: " "${BIN_DIR}"

    if [ ! -x "${BIN_DIR}/z.sh" ]; then
        cd "${_SANDBOX}"

        _trace "Installing z"
        wget --quiet https://raw.githubusercontent.com/rupa/z/master/z.sh
        mv z.sh "${BIN_DIR}/z.sh"
        chmod +x "${BIN_DIR}/z.sh"

        cd "${HOME}"
        rm --force --recursive "${_SANDBOX:?}/*"
    fi
}


# Helper functions -------------------------------------------------------------
_info() {
    local _MESSAGE=${1}

    echo
    echo "---- ${_MESSAGE}" | tee --append "${HOME}/duplic8r.log"
}

_trace() {
    if [ -n "${_TRACE_FLAG}" ]; then
        local _MESSAGE="${1}"
        local _DATA="${2}"
        local _TIMESTAMP
        _TIMESTAMP=$(date +"%Y-%m-%dT%H:%M:%S.%3N")

        echo
        echo "|> ${_TIMESTAMP}: ${_MESSAGE} ${_DATA}" | tee --append "${HOME}/duplic8r.log"
    fi

}

_copy_file() {
    local _SOURCE="$1"
    local _TARGET="$2"
    local _FLAGS=(
        "--archive"
        "--checksum"
        "--itemize-changes"
    )
    _trace "Source: " "${_SOURCE}"
    _trace "Target: " "${_TARGET}"
    _trace "Copy flags: " "${_FLAGS[*]}"

    _trace "Copying file from ${_SOURCE} to ${_TARGET}"
    rsync "${_FLAGS[@]}" "${_SOURCE}" "${_TARGET}"
}


_clone_repo() {
    [ -n "${_LOCAL}" ] && return

    _info "Cloning git repository"

    local _REPO="${1}"
    local _TARGET="${2}"
    local _BRANCH="${3:-stable}"
    _trace "Repo: " "${_REPO}"
    _trace "Target: " "${_TARGET}"
    _trace "Branch: " "${_BRANCH}"

    _trace "Cloning git repository ${_BRANCH}@${_REPO} to ${_TARGET}"
    git clone --branch "${_BRANCH}" "${_REPO}" "${_TARGET}"
}


_pull_repo() {
    [ -n "${_LOCAL}" ] && return

    _info "Updating git repository"

    local _TARGET="${1}"
    local _BRANCH="${2:-stable}"
    _trace "Target: " "${_TARGET}"
    _trace "Branch: " "${_BRANCH}"

    cd "${_TARGET}"
    _trace "Pulling git repository ${_BRANCH}@${_TARGET}"
    git pull origin "${_BRANCH}"
}


_create_sandbox() {
    _info "Creating sandbox"

    mkdir --parents "${_SANDBOX}"
}


_destroy_sandbox() {
    _info "Destroying sandbox"

    rm --recursive --force "${_SANDBOX}"
}


# Main -------------------------------------------------------------------------
_IN_CONTAINER="${IN_CONTAINER}"

while [ $# -gt 0 ]; do
    case "${1}" in
        --local)
            _LOCAL=true
            ;;
        --development)
            _DEVELOPMENT=true
            ;;
        --in-container)
            _IN_CONTAINER=true
            ;;
        --trace)
            _TRACE=true
            ;;
        --debug)
            _DEBUG=true
            ;;
        --snaps)
            _SNAPS=true
            ;;
        --fonts)
            _FONTS=true
            ;;
        --icons)
            _ICONS=true
            ;;
        --kitty)
            _KITTY=true
            ;;
        --docker)
            _DOCKER=true
            ;;
        *)
            echo "Unknown option: " "${1}"
            ;;
    esac
    shift
done

_SANDBOX=/tmp/Sandbox


if [ -n "${_DEBUG}" ]; then
    exec 7>"${HOME}/duplic8r.trace"
if [ -n "${_DEBUG_FLAG}" ]; then
    _trace "Enabled debugging"
    exec 7>"${HOME}/duplic8r.debug"
    BASH_XTRACEFD=7
    set -x
else
    set -e
fi


install_all() {
    install_apt_packages
    install_python_packages
    install_duplic8r
    configure_tmux_plugin_manager
    install_vim_plug
    install_asdf
    install_ctrlR
    install_parallel
    install_z
    set_default_shell

    _create_sandbox

    if [ -n "${_IN_CONTAINER}" ]; then
        [ -n "${_SNAPS}"  ] && install_snaps
        [ -n "${_FONTS}"  ] && install_fonts
        [ -n "${_ICONS}"  ] && install_numix_square_icons
        [ -n "${_KITTY}"  ] && install_kitty
        [ -n "${_DOCKER}" ] && install_docker_engine
    else
        install_snaps
        install_fonts
        install_numix_square_icons
        install_kitty
        install_docker_engine
    fi

    _destroy_sandbox
}


install_all


if [ -n "${_DEBUG}" ]; then
    set +x
if [ -n "${_DEBUG_FLAG}" ]; then
    _trace "Disable debugging"
    exec 7>&-
fi

_trace "Disable tracing"
set +e
set +x

_trace "Unsetting variables"
unset _SANDBOX
unset _LOCAL
unset _DEVELOPMENT
unset _IN_CONTAINER
unset _TRACE
unset _DEBUG
unset _SNAPS
unset _FONTS
unset _ICONS
unset _KITTY
unset _DOCKER
